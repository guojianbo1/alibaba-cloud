# Spring
spring:
  main:
    allow-bean-definition-overriding: true
    allow-circular-references: true
  application:
    # 应用名称
    name: cloud-order
  profiles:
    # 环境配置
    active: dev
  cloud:
    nacos:
      config:
        # 配置中心地址
        server-addr: 192.168.88.128:8848
        # 配置文件格式
        file-extension: yml
        # 共享配置
        shared-configs:
          - application-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}


#  shardingsphere:
#    datasource:
#      names: ds0, ds1, ds2, ds3
#      ds0:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        url: jdbc:mysql://localhost:3306/ry-cloud-order0?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
#        username: root
#        password: 123456
#      ds1:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        url: jdbc:mysql://localhost:3306/ry-cloud-order1?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
#        username: root
#        password: 123456
#      ds2:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        url: jdbc:mysql://localhost:3306/ry-cloud-order2?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
#        username: root
#        password: 123456
#      ds3:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        url: jdbc:mysql://localhost:3306/ry-cloud-order3?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
#        username: root
#        password: 123456
#    sharding:
#      default-database-strategy:
#        inline:
#          sharding-column: user_id
#          algorithm-expression: ds${user_id % 4}
#      binding-tables: ry_order
#      tables:
#        ry_order:
#          actual-data-nodes: ds0.ry_order, ds1.ry_order, ds2.ry_order, ds3.ry_order
#          table-strategy:
#            inline:
#              sharding-column: create_time
#              algorithm-expression: ry_order_$->{T(java.time.LocalDateTime).parse(#create_time, T(java.time.format.DateTimeFormatter).ofPattern('yyyy_MM')).format(T(java.time.format.DateTimeFormatter).ofPattern('yyyy_MM'))}

